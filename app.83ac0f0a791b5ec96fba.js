!function(Q){var n={};function F(B){if(n[B])return n[B].exports;var t=n[B]={i:B,l:!1,exports:{}};return Q[B].call(t.exports,t,t.exports,F),t.l=!0,t.exports}F.m=Q,F.c=n,F.d=function(Q,n,B){F.o(Q,n)||Object.defineProperty(Q,n,{enumerable:!0,get:B})},F.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},F.t=function(Q,n){if(1&n&&(Q=F(Q)),8&n)return Q;if(4&n&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var B=Object.create(null);if(F.r(B),Object.defineProperty(B,"default",{enumerable:!0,value:Q}),2&n&&"string"!=typeof Q)for(var t in Q)F.d(B,t,function(n){return Q[n]}.bind(null,t));return B},F.n=function(Q){var n=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return F.d(n,"a",n),n},F.o=function(Q,n){return Object.prototype.hasOwnProperty.call(Q,n)},F.p="",F(F.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/styles/index.scss\n// extracted by mini-css-extract-plugin\n\n// CONCATENATED MODULE: ./src/scripts/utils/keys.js\nconst KEY_CODE = {\n  TAB: 9,\n  ESC: 27,\n  END: 35,\n  HOME: 36,\n  LEFT: 37,\n  UP: 38,\n  RIGHT: 39,\n  DOWN: 40\n};\n// CONCATENATED MODULE: ./src/scripts/tabs.js\n\nconst SELECTOR_TAB = '[role=\"tab\"]';\nconst SELECTOR_TABS_CONTAINER = '.tabs';\nconst SELECTOR_TAB_PANEL = '[role=\"tabpanel\"]';\nconst SELECTOR_TAB_LIST = '[role=\"tablist\"]';\nconst CLASS_TAB_ACTIVE = 'active';\n\nconst Tabs = tabContainer => {\n  let tablist = tabContainer.querySelectorAll(SELECTOR_TAB_LIST)[0];\n  let tabs = tabContainer.querySelectorAll(SELECTOR_TAB);\n  let panels = tabContainer.querySelectorAll(SELECTOR_TAB_PANEL);\n  let isVerticalOrientation = tablist.getAttribute('aria-orientation') === 'vertical'; // Bind listeners\n\n  for (let i = 0; i < tabs.length; ++i) {\n    addListeners(i);\n  }\n\n  function addListeners(index) {\n    tabs[index].addEventListener('click', clickEventListener);\n    tabs[index].addEventListener('keydown', keydownEventListener);\n    tabs[index].addEventListener('keyup', keyupEventListener);\n    tabs[index].index = index;\n  } // When a tab is clicked, activateTab is fired to activate it\n\n\n  function clickEventListener(event) {\n    let tab = event.target;\n    activateTab(tab, false);\n  } // Handle keydown on tabs\n\n\n  function keydownEventListener(event) {\n    switch (event.keyCode) {\n      case KEY_CODE.END:\n        event.preventDefault();\n        activateTab(tabs[tabs.length - 1]);\n        break;\n\n      case KEY_CODE.HOME:\n        event.preventDefault();\n        activateTab(tabs[0]);\n        break;\n      // Up and down are in keydown\n      // because we need to prevent page scroll >:)\n\n      case KEY_CODE.UP:\n      case KEY_CODE.DOWN:\n        determineOrientation(event);\n        break;\n    }\n  } // Handle keyup on tabs\n\n\n  function keyupEventListener(event) {\n    switch (event.keyCode) {\n      case KEY_CODE.LEFT:\n      case KEY_CODE.RIGHT:\n        determineOrientation(event);\n        break;\n    }\n  } // When a tablistâ€™s aria-orientation is set to vertical,\n  // only up and down arrow should function.\n  // In all other cases only left and right arrow function.\n\n\n  function determineOrientation(event) {\n    let key = event.keyCode;\n\n    if (isVerticalOrientation && (key === KEY_CODE.UP || key === KEY_CODE.DOWN)) {\n      event.preventDefault();\n      switchTabOnArrowPress(event);\n    } else if (!isVerticalOrientation && (key === KEY_CODE.LEFT || key === KEY_CODE.RIGHT)) {\n      switchTabOnArrowPress(event);\n    }\n  } // Either focus the next, previous, first, or last tab\n  // depening on key pressed\n\n\n  function switchTabOnArrowPress(event) {\n    const pressed = event.keyCode;\n    const target = event.target;\n\n    for (let x = 0; x < tabs.length; x++) {\n      tabs[x].addEventListener('focus', focusEventHandler);\n    }\n\n    const direction = pressed === KEY_CODE.UP || pressed === KEY_CODE.LEFT ? -1 : pressed === KEY_CODE.DOWN || pressed === KEY_CODE.RIGHT ? 1 : 0;\n\n    if (direction !== 0 && target.index !== undefined) {\n      const newIndex = target.index + direction;\n      const activeIndex = newIndex < 0 ? tabs.length - 1 : newIndex < tabs.length ? newIndex : 0;\n      tabs[activeIndex].focus();\n    }\n  } // Activates any given tab panel\n\n\n  function activateTab(tab, setFocus) {\n    setFocus = setFocus || true; // Deactivate all other tabs\n\n    deactivateTabs();\n    tab.removeAttribute('tabindex');\n    tab.setAttribute('aria-selected', 'true');\n    tab.classList.add(CLASS_TAB_ACTIVE);\n    const panelId = tab.getAttribute('aria-controls');\n    document.getElementById(panelId).removeAttribute('hidden'); // Set focus when required\n\n    if (setFocus) {\n      tab.focus();\n    }\n  } // Deactivate all tabs and tab panels\n\n\n  function deactivateTabs() {\n    [...tabs].forEach(tab => {\n      tab.setAttribute('tabindex', '-1');\n      tab.setAttribute('aria-selected', 'false');\n      tab.classList.remove(CLASS_TAB_ACTIVE);\n      tab.removeEventListener('focus', focusEventHandler);\n    });\n    [...panels].forEach(panel => {\n      panel.setAttribute('hidden', 'hidden');\n    });\n  }\n\n  function focusEventHandler(event) {\n    let target = event.target;\n    activateTab(target, false);\n  }\n};\n\nconst initTabs = () => {\n  const tabs = document.querySelectorAll(SELECTOR_TABS_CONTAINER);\n  [...tabs].forEach(tabConatiner => {\n    Tabs(tabConatiner);\n  });\n};\n// CONCATENATED MODULE: ./node_modules/tabbable/dist/index.esm.js\n/*!\n* tabbable 5.1.2\n* @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE\n*/\nvar candidateSelectors = ['input', 'select', 'textarea', 'a[href]', 'button', '[tabindex]', 'audio[controls]', 'video[controls]', '[contenteditable]:not([contenteditable=\"false\"])', 'details>summary'];\nvar candidateSelector = /* #__PURE__ */candidateSelectors.join(',');\nvar matches = typeof Element === 'undefined' ? function () {} : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n\nfunction tabbable(el, options) {\n  options = options || {};\n  var regularTabbables = [];\n  var orderedTabbables = [];\n  var candidates = getCandidates(el, options.includeContainer, isNodeMatchingSelectorTabbable);\n  candidates.forEach(function (candidate, i) {\n    var candidateTabindex = getTabindex(candidate);\n\n    if (candidateTabindex === 0) {\n      regularTabbables.push(candidate);\n    } else {\n      orderedTabbables.push({\n        documentOrder: i,\n        tabIndex: candidateTabindex,\n        node: candidate\n      });\n    }\n  });\n  var tabbableNodes = orderedTabbables.sort(sortOrderedTabbables).map(function (a) {\n    return a.node;\n  }).concat(regularTabbables);\n  return tabbableNodes;\n}\n\nfunction focusable(el, options) {\n  options = options || {};\n  var candidates = getCandidates(el, options.includeContainer, isNodeMatchingSelectorFocusable);\n  return candidates;\n}\n\nfunction getCandidates(el, includeContainer, filter) {\n  var candidates = Array.prototype.slice.apply(el.querySelectorAll(candidateSelector));\n\n  if (includeContainer && matches.call(el, candidateSelector)) {\n    candidates.unshift(el);\n  }\n\n  candidates = candidates.filter(filter);\n  return candidates;\n}\n\nfunction isNodeMatchingSelectorTabbable(node) {\n  if (!isNodeMatchingSelectorFocusable(node) || isNonTabbableRadio(node) || getTabindex(node) < 0) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction isTabbable(node) {\n  if (!node) {\n    throw new Error('No node provided');\n  }\n\n  if (matches.call(node, candidateSelector) === false) {\n    return false;\n  }\n\n  return isNodeMatchingSelectorTabbable(node);\n}\n\nfunction isNodeMatchingSelectorFocusable(node) {\n  if (node.disabled || isHiddenInput(node) || isHidden(node)) {\n    return false;\n  }\n\n  return true;\n}\n\nvar focusableCandidateSelector = /* #__PURE__ */candidateSelectors.concat('iframe').join(',');\n\nfunction isFocusable(node) {\n  if (!node) {\n    throw new Error('No node provided');\n  }\n\n  if (matches.call(node, focusableCandidateSelector) === false) {\n    return false;\n  }\n\n  return isNodeMatchingSelectorFocusable(node);\n}\n\nfunction getTabindex(node) {\n  var tabindexAttr = parseInt(node.getAttribute('tabindex'), 10);\n\n  if (!isNaN(tabindexAttr)) {\n    return tabindexAttr;\n  } // Browsers do not return `tabIndex` correctly for contentEditable nodes;\n  // so if they don't have a tabindex attribute specifically set, assume it's 0.\n\n\n  if (isContentEditable(node)) {\n    return 0;\n  } // in Chrome, <audio controls/> and <video controls/> elements get a default\n  //  `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,\n  //  yet they are still part of the regular tab order; in FF, they get a default\n  //  `tabIndex` of 0; since Chrome still puts those elements in the regular tab\n  //  order, consider their tab index to be 0\n\n\n  if ((node.nodeName === 'AUDIO' || node.nodeName === 'VIDEO') && node.getAttribute('tabindex') === null) {\n    return 0;\n  }\n\n  return node.tabIndex;\n}\n\nfunction sortOrderedTabbables(a, b) {\n  return a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex;\n}\n\nfunction isContentEditable(node) {\n  return node.contentEditable === 'true';\n}\n\nfunction isInput(node) {\n  return node.tagName === 'INPUT';\n}\n\nfunction isHiddenInput(node) {\n  return isInput(node) && node.type === 'hidden';\n}\n\nfunction isRadio(node) {\n  return isInput(node) && node.type === 'radio';\n}\n\nfunction isNonTabbableRadio(node) {\n  return isRadio(node) && !isTabbableRadio(node);\n}\n\nfunction getCheckedRadio(nodes, form) {\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i].checked && nodes[i].form === form) {\n      return nodes[i];\n    }\n  }\n}\n\nfunction isTabbableRadio(node) {\n  if (!node.name) {\n    return true;\n  }\n\n  var radioScope = node.form || node.ownerDocument;\n  var radioSet = radioScope.querySelectorAll('input[type=\"radio\"][name=\"' + node.name + '\"]');\n  var checked = getCheckedRadio(radioSet, node.form);\n  return !checked || checked === node;\n}\n\nfunction isHidden(node) {\n  if (getComputedStyle(node).visibility === 'hidden') return true;\n\n  while (node) {\n    if (getComputedStyle(node).display === 'none') return true;\n    node = node.parentElement;\n  }\n\n  return false;\n}\n\n\n//# sourceMappingURL=index.esm.js.map\n\n// CONCATENATED MODULE: ./node_modules/focus-trap/dist/focus-trap.esm.js\n/*!\n* focus-trap 6.1.3\n* @license MIT, https://github.com/focus-trap/focus-trap/blob/master/LICENSE\n*/\n\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar activeFocusDelay;\n\nvar activeFocusTraps = function () {\n  var trapQueue = [];\n  return {\n    activateTrap: function activateTrap(trap) {\n      if (trapQueue.length > 0) {\n        var activeTrap = trapQueue[trapQueue.length - 1];\n\n        if (activeTrap !== trap) {\n          activeTrap.pause();\n        }\n      }\n\n      var trapIndex = trapQueue.indexOf(trap);\n\n      if (trapIndex === -1) {\n        trapQueue.push(trap);\n      } else {\n        // move this existing trap to the front of the queue\n        trapQueue.splice(trapIndex, 1);\n        trapQueue.push(trap);\n      }\n    },\n    deactivateTrap: function deactivateTrap(trap) {\n      var trapIndex = trapQueue.indexOf(trap);\n\n      if (trapIndex !== -1) {\n        trapQueue.splice(trapIndex, 1);\n      }\n\n      if (trapQueue.length > 0) {\n        trapQueue[trapQueue.length - 1].unpause();\n      }\n    }\n  };\n}();\n\nfunction createFocusTrap(element, userOptions) {\n  var doc = document;\n  var container = typeof element === 'string' ? doc.querySelector(element) : element;\n\n  var config = _objectSpread2({\n    returnFocusOnDeactivate: true,\n    escapeDeactivates: true,\n    delayInitialFocus: true\n  }, userOptions);\n\n  var state = {\n    firstTabbableNode: null,\n    lastTabbableNode: null,\n    nodeFocusedBeforeActivation: null,\n    mostRecentlyFocusedNode: null,\n    active: false,\n    paused: false\n  };\n  var trap = {\n    activate: activate,\n    deactivate: deactivate,\n    pause: pause,\n    unpause: unpause\n  };\n  return trap;\n\n  function activate(activateOptions) {\n    if (state.active) return;\n    updateTabbableNodes();\n    state.active = true;\n    state.paused = false;\n    state.nodeFocusedBeforeActivation = doc.activeElement;\n    var onActivate = activateOptions && activateOptions.onActivate ? activateOptions.onActivate : config.onActivate;\n\n    if (onActivate) {\n      onActivate();\n    }\n\n    addListeners();\n    return trap;\n  }\n\n  function deactivate(deactivateOptions) {\n    if (!state.active) return;\n    clearTimeout(activeFocusDelay);\n    removeListeners();\n    state.active = false;\n    state.paused = false;\n    activeFocusTraps.deactivateTrap(trap);\n    var onDeactivate = deactivateOptions && deactivateOptions.onDeactivate !== undefined ? deactivateOptions.onDeactivate : config.onDeactivate;\n\n    if (onDeactivate) {\n      onDeactivate();\n    }\n\n    var returnFocus = deactivateOptions && deactivateOptions.returnFocus !== undefined ? deactivateOptions.returnFocus : config.returnFocusOnDeactivate;\n\n    if (returnFocus) {\n      delay(function () {\n        tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));\n      });\n    }\n\n    return trap;\n  }\n\n  function pause() {\n    if (state.paused || !state.active) return;\n    state.paused = true;\n    removeListeners();\n  }\n\n  function unpause() {\n    if (!state.paused || !state.active) return;\n    state.paused = false;\n    updateTabbableNodes();\n    addListeners();\n  }\n\n  function addListeners() {\n    if (!state.active) return; // There can be only one listening focus trap at a time\n\n    activeFocusTraps.activateTrap(trap); // Delay ensures that the focused element doesn't capture the event\n    // that caused the focus trap activation.\n\n    activeFocusDelay = config.delayInitialFocus ? delay(function () {\n      tryFocus(getInitialFocusNode());\n    }) : tryFocus(getInitialFocusNode());\n    doc.addEventListener('focusin', checkFocusIn, true);\n    doc.addEventListener('mousedown', checkPointerDown, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('touchstart', checkPointerDown, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('click', checkClick, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('keydown', checkKey, {\n      capture: true,\n      passive: false\n    });\n    return trap;\n  }\n\n  function removeListeners() {\n    if (!state.active) return;\n    doc.removeEventListener('focusin', checkFocusIn, true);\n    doc.removeEventListener('mousedown', checkPointerDown, true);\n    doc.removeEventListener('touchstart', checkPointerDown, true);\n    doc.removeEventListener('click', checkClick, true);\n    doc.removeEventListener('keydown', checkKey, true);\n    return trap;\n  }\n\n  function getNodeForOption(optionName) {\n    var optionValue = config[optionName];\n    var node = optionValue;\n\n    if (!optionValue) {\n      return null;\n    }\n\n    if (typeof optionValue === 'string') {\n      node = doc.querySelector(optionValue);\n\n      if (!node) {\n        throw new Error('`' + optionName + '` refers to no known node');\n      }\n    }\n\n    if (typeof optionValue === 'function') {\n      node = optionValue();\n\n      if (!node) {\n        throw new Error('`' + optionName + '` did not return a node');\n      }\n    }\n\n    return node;\n  }\n\n  function getInitialFocusNode() {\n    var node;\n\n    if (getNodeForOption('initialFocus') !== null) {\n      node = getNodeForOption('initialFocus');\n    } else if (container.contains(doc.activeElement)) {\n      node = doc.activeElement;\n    } else {\n      node = state.firstTabbableNode || getNodeForOption('fallbackFocus');\n    }\n\n    if (!node) {\n      throw new Error('Your focus-trap needs to have at least one focusable element');\n    }\n\n    return node;\n  }\n\n  function getReturnFocusNode(previousActiveElement) {\n    var node = getNodeForOption('setReturnFocus');\n    return node ? node : previousActiveElement;\n  } // This needs to be done on mousedown and touchstart instead of click\n  // so that it precedes the focus event.\n\n\n  function checkPointerDown(e) {\n    if (container.contains(e.target)) {\n      // allow the click since it ocurred inside the trap\n      return;\n    }\n\n    if (config.clickOutsideDeactivates) {\n      // immediately deactivate the trap\n      deactivate({\n        // if, on deactivation, we should return focus to the node originally-focused\n        //  when the trap was activated (or the configured `setReturnFocus` node),\n        //  then assume it's also OK to return focus to the outside node that was\n        //  just clicked, causing deactivation, as long as that node is focusable;\n        //  if it isn't focusable, then return focus to the original node focused\n        //  on activation (or the configured `setReturnFocus` node)\n        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,\n        //  which will result in the outside click setting focus to the node\n        //  that was clicked, whether it's focusable or not; by setting\n        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused\n        //  on activation (or the configured `setReturnFocus` node)\n        returnFocus: config.returnFocusOnDeactivate && !isFocusable(e.target)\n      });\n      return;\n    } // This is needed for mobile devices.\n    // (If we'll only let `click` events through,\n    // then on mobile they will be blocked anyways if `touchstart` is blocked.)\n\n\n    if (config.allowOutsideClick && (typeof config.allowOutsideClick === 'boolean' ? config.allowOutsideClick : config.allowOutsideClick(e))) {\n      // allow the click outside the trap to take place\n      return;\n    } // otherwise, prevent the click\n\n\n    e.preventDefault();\n  } // In case focus escapes the trap for some strange reason, pull it back in.\n\n\n  function checkFocusIn(e) {\n    // In Firefox when you Tab out of an iframe the Document is briefly focused.\n    if (container.contains(e.target) || e.target instanceof Document) {\n      return;\n    }\n\n    e.stopImmediatePropagation();\n    tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());\n  }\n\n  function checkKey(e) {\n    if (config.escapeDeactivates !== false && isEscapeEvent(e)) {\n      e.preventDefault();\n      deactivate();\n      return;\n    }\n\n    if (isTabEvent(e)) {\n      checkTab(e);\n      return;\n    }\n  } // Hijack Tab events on the first and last focusable nodes of the trap,\n  // in order to prevent focus from escaping. If it escapes for even a\n  // moment it can end up scrolling the page and causing confusion so we\n  // kind of need to capture the action at the keydown phase.\n\n\n  function checkTab(e) {\n    updateTabbableNodes();\n\n    if (e.shiftKey && e.target === state.firstTabbableNode) {\n      e.preventDefault();\n      tryFocus(state.lastTabbableNode);\n      return;\n    }\n\n    if (!e.shiftKey && e.target === state.lastTabbableNode) {\n      e.preventDefault();\n      tryFocus(state.firstTabbableNode);\n      return;\n    }\n  }\n\n  function checkClick(e) {\n    if (config.clickOutsideDeactivates) return;\n    if (container.contains(e.target)) return;\n\n    if (config.allowOutsideClick && (typeof config.allowOutsideClick === 'boolean' ? config.allowOutsideClick : config.allowOutsideClick(e))) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  }\n\n  function updateTabbableNodes() {\n    var tabbableNodes = tabbable(container);\n    state.firstTabbableNode = tabbableNodes[0] || getInitialFocusNode();\n    state.lastTabbableNode = tabbableNodes[tabbableNodes.length - 1] || getInitialFocusNode();\n  }\n\n  function tryFocus(node) {\n    if (node === doc.activeElement) return;\n\n    if (!node || !node.focus) {\n      tryFocus(getInitialFocusNode());\n      return;\n    }\n\n    node.focus({\n      preventScroll: !!config.preventScroll\n    });\n    state.mostRecentlyFocusedNode = node;\n\n    if (isSelectableInput(node)) {\n      node.select();\n    }\n  }\n}\n\nfunction isSelectableInput(node) {\n  return node.tagName && node.tagName.toLowerCase() === 'input' && typeof node.select === 'function';\n}\n\nfunction isEscapeEvent(e) {\n  return e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27;\n}\n\nfunction isTabEvent(e) {\n  return e.key === 'Tab' || e.keyCode === 9;\n}\n\nfunction delay(fn) {\n  return setTimeout(fn, 0);\n}\n\n\n//# sourceMappingURL=focus-trap.esm.js.map\n\n// CONCATENATED MODULE: ./src/scripts/utils/focus.js\nconst setFocusOnFirstDescendant = element => {\n  for (let i = 0; i < element.childNodes.length; i++) {\n    const child = element.childNodes[i];\n\n    if (tryToSetFocus(child) || setFocusOnFirstDescendant(child)) {\n      return true;\n    }\n  }\n\n  return false;\n};\nconst setFocusOnLastDescendant = element => {\n  for (let i = element.childNodes.length - 1; i >= 0; i--) {\n    let child = element.childNodes[i];\n\n    if (tryToSetFocus(child) || setFocusOnLastDescendant(child)) {\n      return true;\n    }\n  }\n\n  return false;\n};\nconst tryToSetFocus = function (element) {\n  if (!focus_isFocusable(element)) {\n    return false;\n  }\n\n  try {\n    element.focus();\n  } catch (e) {}\n\n  return document.activeElement === element;\n};\nconst focus_isFocusable = function (element) {\n  if (element.tabIndex > 0 || element.tabIndex === 0 && element.getAttribute('tabIndex') !== null) {\n    return true;\n  }\n\n  if (element.disabled) {\n    return false;\n  }\n\n  switch (element.nodeName) {\n    case 'A':\n      return !!element.href && element.rel != 'ignore';\n\n    case 'INPUT':\n      return element.type != 'hidden' && element.type != 'file';\n\n    case 'BUTTON':\n    case 'SELECT':\n    case 'TEXTAREA':\n      return true;\n\n    default:\n      return false;\n  }\n};\n// CONCATENATED MODULE: ./src/scripts/modal.js\n\n\n\nconst BODY_OPEN_CLASS = 'has-modal';\nconst MODAL_OPEN_CLASS = 'modal--open';\nconst DATA_MODAL_TOGGLE = 'data-toggle-modal';\nconst DATA_MODAL_CLOSE = 'data-close-modal';\nconst EVENT_CLOSE = 'modal.close';\nconst EVENT_OPEN = 'modal.open';\nlet activeModal = null; // this.eventClose = new Event(EVENT_CLOSE);\n// this.eventOpen = new Event(EVENT_OPEN);\n\nclass modal_Modal {\n  constructor(modalID, toggles) {\n    this.modal = document.getElementById(modalID);\n    this.focusTrap = createFocusTrap(this.modal);\n\n    if (toggles && toggles.length > 0) {\n      this.initToggles(toggles);\n    }\n\n    this.eventClose = new Event(EVENT_CLOSE);\n    this.eventOpen = new Event(EVENT_OPEN);\n  }\n\n  initToggles(toggles) {\n    [...toggles].filter(Boolean).forEach(toggle => {\n      toggle.addEventListener('click', event => this.showModal(event));\n    });\n  }\n\n  showModal(event) {\n    activeModal = this;\n    this.activeElement = document.activeElement;\n    this.modal.classList.add(MODAL_OPEN_CLASS);\n    document.body.classList.add(BODY_OPEN_CLASS);\n    setFocusOnFirstDescendant(this.modal);\n    this.focusTrap.activate();\n    this.hideAllContentForScreenReaders();\n    this.addEventListeners();\n    this.modal.dispatchEvent(this.eventOpen);\n  }\n\n  closeModal(event) {\n    activeModal.removeEventListeners();\n    document.body.classList.remove(BODY_OPEN_CLASS);\n    activeModal.modal.classList.remove(MODAL_OPEN_CLASS);\n    activeModal.focusTrap.deactivate();\n    this.showAllContentForScreenReaders();\n\n    if (activeModal.activeElement && activeModal.activeElement.focus) {\n      activeModal.activeElement.focus();\n    }\n\n    activeModal.modal.dispatchEvent(activeModal.eventClose);\n    activeModal = null;\n  }\n\n  addEventListeners() {\n    this.modal.addEventListener('touchstart', this.handleModalClick);\n    this.modal.addEventListener('click', this.handleModalClick);\n    document.addEventListener('keyup', this.handleDocumentKeyUpEvent);\n  }\n\n  removeEventListeners() {\n    this.modal.removeEventListener('touchstart', this.handleModalClick);\n    this.modal.removeEventListener('click', this.handleModalClick);\n    document.removeEventListener('keydown', this.handleDocumentKeyUpEvent);\n  }\n\n  handleDocumentKeyUpEvent(event) {\n    if (event.keyCode === KEY_CODE.ESC) {\n      event.stopPropagation();\n      activeModal.closeModal(event);\n    }\n  }\n\n  handleModalClick(event) {\n    const closeAttr = `[${DATA_MODAL_CLOSE}]`;\n\n    if (event.target.hasAttribute(closeAttr) || event.target.closest(closeAttr)) {\n      activeModal.closeModal(event);\n    }\n  }\n\n  hideAllContentForScreenReaders() {\n    [...document.body.children].forEach(child => {\n      if (child !== this.modal) {\n        child.setAttribute('aria-hidden', true);\n      }\n    });\n  }\n\n  showAllContentForScreenReaders() {\n    [...document.body.children].forEach(child => {\n      if (child !== this.modal) {\n        child.removeAttribute('aria-hidden');\n      }\n    });\n  }\n\n}\n\nconst generateModalsTogglesMap = toggles => {\n  const map = [];\n  toggles.forEach(toggle => {\n    const modalID = toggle.getAttribute(DATA_MODAL_TOGGLE);\n    if (map[modalID] === undefined) map[modalID] = [];\n    map[modalID].push(toggle);\n  });\n  return map;\n};\n\nconst initModals = () => {\n  const toggles = document.querySelectorAll(`[${DATA_MODAL_TOGGLE}]`);\n  const modalsTogglesMap = generateModalsTogglesMap(toggles);\n  Object.keys(modalsTogglesMap).forEach(modalID => {\n    const toggles = modalsTogglesMap[modalID];\n    new modal_Modal(modalID, toggles);\n  });\n};\n// CONCATENATED MODULE: ./src/scripts/forms.js\nconst SELECTOR_INPUT_WRAPPER = '.form-field';\nconst SELECTOR_INPUT = '.form-field__input';\nconst SELECTOR_ERROR = '.form-field__error';\nconst CLASS_LABEL_ABOVE = 'form-field__label--above';\nconst CLASS_INVALID = 'form-field--invalid';\n\nfunction handleInputChangeEvent(event) {\n  const target = event.target;\n  changeFloatLabelState(target);\n}\n\nfunction changeFloatLabelState(input) {\n  const label = input.labels ? input.labels[0] : null;\n\n  if (label) {\n    const isLabelAbove = input.value || input === document.activeElement;\n    isLabelAbove ? label.classList.add(CLASS_LABEL_ABOVE) : label.classList.remove(CLASS_LABEL_ABOVE);\n  }\n}\n\nfunction validateRequiredInput(input) {\n  if (!input.value) {\n    setInvalidState(input);\n    return false;\n  }\n\n  return true;\n}\n\nfunction setInvalidState(input) {\n  const wrapper = input.closest(SELECTOR_INPUT_WRAPPER);\n  const error = wrapper.querySelectorAll(SELECTOR_ERROR)[0];\n  wrapper.classList.add(CLASS_INVALID);\n  error.removeAttribute('hidden');\n  input.setAttribute('aria-describedby', error.id);\n  input.setAttribute('aria-invalid', true);\n}\n\nfunction resetInvalidState(input) {\n  const wrapper = input.closest(SELECTOR_INPUT_WRAPPER);\n  const error = wrapper.querySelectorAll(SELECTOR_ERROR)[0];\n  wrapper.classList.remove(CLASS_INVALID);\n  error.setAttribute('hidden', 'hidden');\n  input.removeAttribute('aria-describedby');\n  input.removeAttribute('aria-invalid');\n}\n\nfunction initInputs() {\n  const inputs = document.querySelectorAll(SELECTOR_INPUT);\n  [...inputs].forEach(input => {\n    input.addEventListener('change', handleInputChangeEvent);\n  });\n}\n\nfunction initLoginForm() {\n  const loginModal = document.getElementById('loginModal');\n  const loginForm = document.getElementById('loginForm');\n  const inputs = loginForm.querySelectorAll(SELECTOR_INPUT);\n\n  function addEventListeners() {\n    loginModal.addEventListener('modal.close', e => resetFormInvalidState());\n    loginForm.addEventListener('submit', submitForm);\n    [...inputs].forEach(input => {\n      input.addEventListener('keyup', e => {\n        e.target.value && resetInvalidState(e.target);\n      });\n    });\n  }\n\n  function submitForm(event) {\n    const isFormValid = validateForm();\n\n    if (isFormValid) {\n      loginModal.querySelector('[data-close-modal]').click();\n    } else {\n      event.preventDefault();\n      const invalidFields = loginForm.querySelectorAll('[aria-invalid]');\n      invalidFields[0].focus();\n    }\n  }\n\n  function validateForm() {\n    let isFormValid = true;\n    [...inputs].forEach(input => {\n      const isValid = validateRequiredInput(input);\n      !isValid && (isFormValid = false);\n    });\n    return isFormValid;\n  }\n\n  function resetFormInvalidState() {\n    [...inputs].forEach(input => {\n      resetInvalidState(input);\n    });\n  }\n\n  addEventListeners();\n}\n\nconst initForms = () => {\n  initInputs();\n  initLoginForm();\n};\n// CONCATENATED MODULE: ./src/scripts/app.js\n\n\n\n\nclass app_App {\n  constructor() {}\n\n  init() {\n    initModals();\n    initTabs();\n    initForms();\n  }\n\n}\n\nconst app = new app_App();\ndocument.addEventListener('DOMContentLoaded', () => app.init());\n// CONCATENATED MODULE: ./src/index.js\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")}]);